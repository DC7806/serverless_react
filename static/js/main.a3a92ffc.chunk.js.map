{"version":3,"sources":["blogs.js","header.js","components/Blogform.js","App.js","serviceWorker.js","index.js"],"names":["Blogs","_props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","blogsList","fetchData","bind","assertThisInitialized","_this2","fetch","then","response","json","data","setState","map","_ref","index","title","body","react_default","a","createElement","Jumbotron_default","key","className","renderList","React","Component","Header","Navbar_default","collapseOnSelect","expand","bg","variant","Brand","href","BlogForm","handleInputChange","handleSubmit","postData","event","target","name","value","defineProperty","titleInput","bodyInput","method","JSON","stringify","res","console","log","catch","error","preventDefault","Form_default","onSubmit","Group","controlId","Label","Control","onChange","size","type","as","rows","Button_default","App","Fragment","header_Header","blogs_Blogs","Blogform_BlogForm","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3a92ffc.chunk.js","sourcesContent":["import React from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\nexport default class Blogs extends React.Component {\n\n  constructor(_props){\n    super()\n    this.state = { blogsList: [] }\n\n    this.fetchData = this.fetchData.bind(this)\n  }\n\n  componentDidMount() {\n    this.fetchData()\n  }\n  \n  fetchData() {\n    const url = 'https://bdrbn5pb32.execute-api.ap-southeast-1.amazonaws.com/dev/blogs'\n    \n    fetch(url)\n    .then(response => (response.json()))\n    .then(data => {\n      this.setState(\n        { blogsList: data }\n      ) \n    })\n  }\n\n  renderList() {\n    return this.state.blogsList.map(({title, body}, index) => (\n      <Jumbotron key={index} className=\"blog-item\">\n        <h2>{title}</h2>\n        <p>{body}</p>\n      </Jumbotron>\n    ))\n  }\n\n  render() {\n    return (\n      <div className=\"blog-list\">\n        { this.renderList() }\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\n\nexport default class Header extends React.Component {\n  render() {\n    return (\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"/\">Serverless React</Navbar.Brand>\n      </Navbar>\n    );\n  }\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nexport default class BlogForm extends React.Component {\n  constructor(_props) {\n    super();\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.postData = this.postData.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n\n    this.setState({[name]: value})\n  }\n  \n  postData() {\n    let url = 'https://bdrbn5pb32.execute-api.ap-southeast-1.amazonaws.com/dev/blogs'\n    let data = {title: this.state.titleInput, body: this.state.bodyInput}\n    \n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    })\n    .then(res => res.json())\n    .then(response => console.log('Success:', JSON.stringify(response)))\n    .catch(error => console.error('Error:', error));\n  }\n  \n  handleSubmit(event) {\n    this.postData();  \n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <Form.Group controlId=\"formTitle\">\n          <Form.Label>Title</Form.Label>\n          <Form.Control onChange={this.handleInputChange} name=\"titleInput\" size=\"lg\" type=\"text\" />\n        </Form.Group>\n\n        <Form.Group controlId=\"formBody\">\n          <Form.Label>Body</Form.Label>\n          <Form.Control onChange={this.handleInputChange} name=\"bodyInput\" as=\"textarea\" rows=\"10\" />\n        </Form.Group>\n\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    );\n  }\n}\n","import React from 'react';\nimport Blogs from './blogs';\nimport Header from './header';\nimport BlogForm from './components/Blogform' \n\nexport default class App extends React.Component {\n  render(){\n    return (\n      <React.Fragment>\n        <Header/>\n        <div className=\"container my-5\">\n          <Blogs className=\"blogs\"/>\n          <BlogForm />\n        </div>\n      </React.Fragment>\n    );  \n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}