{"version":3,"sources":["components/EditForm.js","components/VerticalModal.js","blogs.js","header.js","components/Blogform.js","App.js","serviceWorker.js","index.js"],"names":["EditForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","objectSpread","handleInputChange","bind","assertThisInitialized","handleSubmit","putData","event","target","name","value","setState","defineProperty","url","concat","blogid","data","title","titleInput","content","contentInput","fetch","method","body","JSON","stringify","then","res","json","response","console","log","catch","error","preventDefault","react_default","a","createElement","Form_default","onSubmit","Group","controlId","Label","Control","onChange","size","type","defaultValue","as","rows","Button_default","variant","React","Component","VerticalModal","Modal_default","assign","aria-labelledby","centered","Header","closeButton","Title","id","Body","EditForm_EditForm","key","Blogs","_props","blogsList","modalShow","fetchData","_this2","item","_this3","map","index","Jumbotron_default","className","ButtonToolbar_default","onClick","_this4","VerticalModal_VerticalModal","show","onHide","renderList","renderModal","Navbar_default","collapseOnSelect","expand","bg","Brand","href","BlogForm","postData","App","Fragment","header_Header","blogs_Blogs","Blogform_BlogForm","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f5f6e29.chunk.js","sourcesContent":["import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nexport default class EditForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {...props}\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.putData = this.putData.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n\n    this.setState({[name]: value})\n  }\n\n  putData() {\n    let url = `https://bdrbn5pb32.execute-api.ap-southeast-1.amazonaws.com/dev/blogs/${this.state.blogid}`\n    let data = {title: this.state.titleInput, content: this.state.contentInput}\n\n    fetch(url, {\n      method: 'PUT',\n      body: JSON.stringify(data)\n    })\n    .then(res => res.json())\n    .then(response => console.log(`Success: ${JSON.stringify(response)}`))\n    .catch(error => console.error(`Error: ${error}`));\n  }\n  \n  handleSubmit(event) {\n    this.putData();\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <Form onSubmit={ this.handleSubmit }>\n        <Form.Group controlId=\"formTitle\">\n          <Form.Label>Title</Form.Label>\n          <Form.Control onChange={ this.handleInputChange } name=\"titleInput\" size=\"lg\" type=\"text\" defaultValue={ this.state.title } />\n        </Form.Group>\n\n        <Form.Group controlId=\"formContent\">\n          <Form.Label>Content</Form.Label>\n          <Form.Control onChange={ this.handleInputChange } name=\"contentInput\" as=\"textarea\" rows=\"10\" defaultValue={ this.state.content } />\n        </Form.Group>\n\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    );\n  }\n}","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport EditForm from './EditForm';\n\nexport default class VerticalModal extends React.Component {\n  render() {\n    // console.log(this.props)\n    \n    return (\n      <Modal\n        {...this.props}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Edit\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <EditForm blogid={this.props.blogid}\n                    title={this.props.title}\n                    content={this.props.content}\n                    key={this.props.blogid} />\n        </Modal.Body>\n      </Modal>\n    );\n  }\n}\n ","import React from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport Button from 'react-bootstrap/Button';\nimport VerticalModal from './components/VerticalModal';\n\nexport default class Blogs extends React.Component {\n\n  constructor(_props){\n    super()\n    this.state = {\n      blogsList: [],\n      modalShow: false,\n      blogid: '',\n      title: '',\n      content: ''\n    }\n    this.fetchData = this.fetchData.bind(this)\n  }\n\n  componentDidMount() {\n    this.fetchData()\n  }\n  \n  fetchData() {\n    const url = 'https://bdrbn5pb32.execute-api.ap-southeast-1.amazonaws.com/dev/blogs'\n    \n    fetch(url)\n    .then(response => (response.json()))\n    .then(data => {\n      this.setState(\n        { blogsList: data }\n      ) \n    })\n  }\n\n  onClick(item) {\n    this.setState({\n      modalShow: true,\n      blogid: item.id,\n      title: item.title,\n      content: item.content\n    })\n  }\n  \n  renderList() {\n    return this.state.blogsList.map((item, index) => (\n      <Jumbotron key={item.id} className=\"blog-item\">\n        <h2>{ item.title }</h2>\n        <p>{ item.content }</p>\n        <ButtonToolbar>\n          <Button variant=\"primary\" onClick={() => this.onClick(item)} >\n            Edit\n          </Button>\n        </ButtonToolbar>\n      </Jumbotron>\n    ))\n  }\n\n  renderModal() {\n    let modalClose = () => this.setState({ modalShow: false })\n\n    return (      \n      <VerticalModal show={ this.state.modalShow }\n                     onHide={ modalClose }\n                     blogid={ this.state.id }\n                     title={ this.state.title }\n                     content={ this.state.content } />\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"blog-list\">\n        { this.renderList() }\n        { this.renderModal() }\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\n\nexport default class Header extends React.Component {\n  render() {\n    return (\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"/\">Serverless React</Navbar.Brand>\n      </Navbar>\n    );\n  }\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nexport default class BlogForm extends React.Component {\n  constructor(_props) {\n    super();\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.postData = this.postData.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n\n    this.setState({[name]: value})\n  }\n  \n  postData() {\n    let url = 'https://bdrbn5pb32.execute-api.ap-southeast-1.amazonaws.com/dev/blogs'\n    let data = {title: this.state.titleInput, content: this.state.contentInput}\n\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    })\n    .then(res => res.json())\n    .then(response => console.log(`Success: ${JSON.stringify(response)}`))\n    .catch(error => console.error(`Error: ${error}`));\n  }\n  \n  handleSubmit(event) {\n    this.postData();  \n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <Form onSubmit={ this.handleSubmit }>\n        <Form.Group controlId=\"formTitle\">\n          <Form.Label>Title</Form.Label>\n          <Form.Control onChange={ this.handleInputChange } name=\"titleInput\" size=\"lg\" type=\"text\" />\n        </Form.Group>\n\n        <Form.Group controlId=\"formContent\">\n          <Form.Label>Content</Form.Label>\n          <Form.Control onChange={ this.handleInputChange } name=\"contentInput\" as=\"textarea\" rows=\"10\" />\n        </Form.Group>\n\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    );\n  }\n}\n","import React from 'react';\nimport Blogs from './blogs';\nimport Header from './header';\nimport BlogForm from './components/Blogform' \n\nexport default class App extends React.Component {\n  render(){\n    return (\n      <React.Fragment>\n        <Header/>\n        <div className=\"container my-5\">\n          <Blogs className=\"blogs\"/>\n          <BlogForm />\n        </div>\n      </React.Fragment>\n    );  \n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}